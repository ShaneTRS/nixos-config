diff --git a/app/streaming/input/keyboard.cpp b/app/streaming/input/keyboard.cpp
index a501cdb6..be6e5abd 100644
--- a/app/streaming/input/keyboard.cpp
+++ b/app/streaming/input/keyboard.cpp
@@ -3,15 +3,146 @@
 #include <Limelight.h>
 #include <SDL.h>
 
-#define VK_0 0x30
-#define VK_A 0x41
-
-// These are real Windows VK_* codes
-#ifndef VK_F1
-#define VK_F1 0x70
-#define VK_F13 0x7C
-#define VK_NUMPAD0 0x60
-#endif
+static const std::map<int, short> sdl_vk_map = {
+    {SDL_SCANCODE_BACKSPACE, 0x08}, {SDL_SCANCODE_TAB, 0x09},
+
+    {SDL_SCANCODE_CLEAR, 0x0C},
+    {SDL_SCANCODE_RETURN, 0x0D},
+    {SDL_SCANCODE_MENU, 0x12},
+    {SDL_SCANCODE_PAUSE, 0x13},
+    {SDL_SCANCODE_CAPSLOCK, 0x14},
+    {SDL_SCANCODE_LANG1, 0x15},
+    {SDL_SCANCODE_LANG2, 0x17},
+    {SDL_SCANCODE_LANG3, 0x16},
+    {SDL_SCANCODE_LANG4, 0x18},
+    {SDL_SCANCODE_INTERNATIONAL1, 0x19},
+    {SDL_SCANCODE_INTERNATIONAL2, 0x1A},
+    {SDL_SCANCODE_ESCAPE, 0x1B},
+    {SDL_SCANCODE_INTERNATIONAL3, 0x1C},
+    {SDL_SCANCODE_INTERNATIONAL4, 0x1D},
+    {SDL_SCANCODE_INTERNATIONAL5, 0x1E},
+    {SDL_SCANCODE_LANG5, 0x1F},
+    {SDL_SCANCODE_SPACE, 0x20},
+    {SDL_SCANCODE_PAGEUP, 0x21},
+    {SDL_SCANCODE_PAGEDOWN, 0x22},
+    {SDL_SCANCODE_END, 0x23},
+    {SDL_SCANCODE_HOME, 0x24},
+    {SDL_SCANCODE_LEFT, 0x25},
+    {SDL_SCANCODE_UP, 0x26},
+    {SDL_SCANCODE_RIGHT, 0x27},
+    {SDL_SCANCODE_DOWN, 0x28},
+    {SDL_SCANCODE_SELECT, 0x29},
+    {SDL_SCANCODE_EXECUTE, 0x2B},
+    {SDL_SCANCODE_PRINTSCREEN, 0x2C},
+    {SDL_SCANCODE_INSERT, 0x2D},
+    {SDL_SCANCODE_DELETE, 0x2E},
+    {SDL_SCANCODE_HELP, 0x2F},
+    {SDL_SCANCODE_0, 0x30},
+
+    {SDL_SCANCODE_1, 0x31}, {SDL_SCANCODE_2, 0x32},
+    {SDL_SCANCODE_3, 0x33}, {SDL_SCANCODE_4, 0x34},
+    {SDL_SCANCODE_5, 0x35}, {SDL_SCANCODE_6, 0x36},
+    {SDL_SCANCODE_7, 0x37}, {SDL_SCANCODE_8, 0x38},
+    {SDL_SCANCODE_9, 0x39},
+
+    {SDL_SCANCODE_A, 0x41}, {SDL_SCANCODE_B, 0x42},
+    {SDL_SCANCODE_C, 0x43}, {SDL_SCANCODE_D, 0x44},
+    {SDL_SCANCODE_E, 0x45}, {SDL_SCANCODE_F, 0x46},
+    {SDL_SCANCODE_G, 0x47}, {SDL_SCANCODE_H, 0x48},
+    {SDL_SCANCODE_I, 0x49}, {SDL_SCANCODE_J, 0x4A},
+    {SDL_SCANCODE_K, 0x4B}, {SDL_SCANCODE_L, 0x4C},
+    {SDL_SCANCODE_M, 0x4D}, {SDL_SCANCODE_N, 0x4E},
+    {SDL_SCANCODE_O, 0x4F}, {SDL_SCANCODE_P, 0x50},
+    {SDL_SCANCODE_Q, 0x51}, {SDL_SCANCODE_R, 0x52},
+    {SDL_SCANCODE_S, 0x53}, {SDL_SCANCODE_T, 0x54},
+    {SDL_SCANCODE_U, 0x55}, {SDL_SCANCODE_V, 0x56},
+    {SDL_SCANCODE_W, 0x57}, {SDL_SCANCODE_X, 0x58},
+    {SDL_SCANCODE_Y, 0x59}, {SDL_SCANCODE_Z, 0x5A},
+
+    {SDL_SCANCODE_LGUI, 0x5B}, {SDL_SCANCODE_RGUI, 0x5C},
+
+    {SDL_SCANCODE_APPLICATION, 0x5D},
+    // {SDL_SCANCODE_SLEEP, 0x5F},
+
+    {SDL_SCANCODE_BRIGHTNESSDOWN, 0x97}, {SDL_SCANCODE_BRIGHTNESSUP, 0x98},
+
+    {SDL_SCANCODE_KP_0, 0x60},
+
+    {SDL_SCANCODE_KP_1, 0x61}, {SDL_SCANCODE_KP_2, 0x62},
+    {SDL_SCANCODE_KP_3, 0x63}, {SDL_SCANCODE_KP_4, 0x64},
+    {SDL_SCANCODE_KP_5, 0x65}, {SDL_SCANCODE_KP_6, 0x66},
+    {SDL_SCANCODE_KP_7, 0x67}, {SDL_SCANCODE_KP_8, 0x68},
+    {SDL_SCANCODE_KP_9, 0x69},
+
+    {SDL_SCANCODE_KP_MULTIPLY, 0x6A},
+    {SDL_SCANCODE_KP_PLUS, 0x6B},
+    {SDL_SCANCODE_KP_COMMA, 0x6C},
+    {SDL_SCANCODE_KP_MINUS, 0x6D},
+    {SDL_SCANCODE_KP_PERIOD, 0x6E},
+    {SDL_SCANCODE_KP_DIVIDE, 0x6F},
+    {SDL_SCANCODE_KP_ENTER, 0x0D},
+
+    {SDL_SCANCODE_F1, 0x70},  {SDL_SCANCODE_F2, 0x71},
+    {SDL_SCANCODE_F3, 0x72},  {SDL_SCANCODE_F4, 0x73},
+    {SDL_SCANCODE_F5, 0x74},  {SDL_SCANCODE_F6, 0x75},
+    {SDL_SCANCODE_F7, 0x76},  {SDL_SCANCODE_F8, 0x77},
+    {SDL_SCANCODE_F9, 0x78},  {SDL_SCANCODE_F10, 0x79},
+    {SDL_SCANCODE_F11, 0x7A}, {SDL_SCANCODE_F12, 0x7B},
+
+    {SDL_SCANCODE_F13, 0x7C}, {SDL_SCANCODE_F14, 0x7D},
+    {SDL_SCANCODE_F15, 0x7E}, {SDL_SCANCODE_F16, 0x7F},
+    {SDL_SCANCODE_F17, 0x80}, {SDL_SCANCODE_F18, 0x81},
+    {SDL_SCANCODE_F19, 0x82}, {SDL_SCANCODE_F20, 0x83},
+    {SDL_SCANCODE_F21, 0x84}, {SDL_SCANCODE_F22, 0x85},
+    {SDL_SCANCODE_F23, 0x86}, {SDL_SCANCODE_F24, 0x87},
+
+    {SDL_SCANCODE_NUMLOCKCLEAR, 0x90},
+    {SDL_SCANCODE_SCROLLLOCK, 0x91},
+    {SDL_SCANCODE_LSHIFT, 0xA0},
+    {SDL_SCANCODE_RSHIFT, 0xA1},
+    {SDL_SCANCODE_LCTRL, 0xA2},
+    {SDL_SCANCODE_RCTRL, 0xA3},
+    {SDL_SCANCODE_LALT, 0xA4},
+    {SDL_SCANCODE_RALT, 0xA5},
+    {SDL_SCANCODE_AC_BACK, 0xA6},
+    {SDL_SCANCODE_AC_FORWARD, 0xA7},
+    {SDL_SCANCODE_AC_REFRESH, 0xA8},
+    {SDL_SCANCODE_AC_STOP, 0xA9},
+    {SDL_SCANCODE_AC_SEARCH, 0xAA},
+    {SDL_SCANCODE_AC_BOOKMARKS, 0xAB},
+    {SDL_SCANCODE_AC_HOME, 0xAC},
+    {SDL_SCANCODE_MUTE, 0xAD},
+    {SDL_SCANCODE_VOLUMEDOWN, 0xAE},
+    {SDL_SCANCODE_VOLUMEUP, 0xAF},
+
+    {SDL_SCANCODE_AUDIONEXT, 0xB0}, {SDL_SCANCODE_AUDIOPREV, 0xB1},
+    {SDL_SCANCODE_AUDIOSTOP, 0xB2}, {SDL_SCANCODE_AUDIOPLAY, 0xB3},
+
+    {SDL_SCANCODE_MAIL, 0xB4},
+    {SDL_SCANCODE_MEDIASELECT, 0xB5},
+
+    {SDL_SCANCODE_CALCULATOR, 0xB6}, {SDL_SCANCODE_COMPUTER, 0xB7},
+
+    {SDL_SCANCODE_SEMICOLON, 0xBA},
+    {SDL_SCANCODE_EQUALS, 0xBB},
+    {SDL_SCANCODE_COMMA, 0xBC},
+    {SDL_SCANCODE_MINUS, 0xBD},
+    {SDL_SCANCODE_PERIOD, 0xBE},
+    {SDL_SCANCODE_SLASH, 0xBF},
+    {SDL_SCANCODE_GRAVE, 0xC0},
+    {SDL_SCANCODE_LEFTBRACKET, 0xDB},
+    {SDL_SCANCODE_BACKSLASH, 0xDC},
+    {SDL_SCANCODE_RIGHTBRACKET, 0xDD},
+    {SDL_SCANCODE_APOSTROPHE, 0xDE},
+
+    {SDL_SCANCODE_NONUSBACKSLASH, 0xE2},
+    {SDL_SCANCODE_SYSREQ, 0xE5},
+
+    {SDL_SCANCODE_CRSEL, 0xF7}, {SDL_SCANCODE_EXSEL, 0xF8},
+
+    {SDL_SCANCODE_CLEARAGAIN, 0xF9},
+    {SDL_SCANCODE_CLEAR, 0xFE}
+};
 
 void SdlInputHandler::performSpecialKeyCombo(KeyCombo combo)
 {
@@ -156,10 +287,8 @@ void SdlInputHandler::handleKeyEvent(SDL_KeyboardEvent* event)
     }
 
     // Check for our special key combos
-    if ((event->state == SDL_PRESSED) &&
-            (event->keysym.mod & KMOD_CTRL) &&
-            (event->keysym.mod & KMOD_ALT) &&
-            (event->keysym.mod & KMOD_SHIFT)) {
+    if (event->state == SDL_PRESSED && m_KeysDown.contains(sdl_vk_map.at(SDL_SCANCODE_SCROLLLOCK))) {
+        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Combo is held: %d", event->keysym.scancode);
         // First we test the SDLK combos for matches,
         // that way we ensure that latin keyboard users
         // can match to the key they see on their keyboards.
@@ -206,220 +335,14 @@ void SdlInputHandler::handleKeyEvent(SDL_KeyboardEvent* event)
     // Set keycode. We explicitly use scancode here because GFE will try to correct
     // for AZERTY layouts on the host but it depends on receiving VK_ values matching
     // a QWERTY layout to work.
-    if (event->keysym.scancode >= SDL_SCANCODE_1 && event->keysym.scancode <= SDL_SCANCODE_9) {
-        // SDL defines SDL_SCANCODE_0 > SDL_SCANCODE_9, so we need to handle that manually
-        keyCode = (event->keysym.scancode - SDL_SCANCODE_1) + VK_0 + 1;
-    }
-    else if (event->keysym.scancode >= SDL_SCANCODE_A && event->keysym.scancode <= SDL_SCANCODE_Z) {
-        keyCode = (event->keysym.scancode - SDL_SCANCODE_A) + VK_A;
-    }
-    else if (event->keysym.scancode >= SDL_SCANCODE_F1 && event->keysym.scancode <= SDL_SCANCODE_F12) {
-        keyCode = (event->keysym.scancode - SDL_SCANCODE_F1) + VK_F1;
-    }
-    else if (event->keysym.scancode >= SDL_SCANCODE_F13 && event->keysym.scancode <= SDL_SCANCODE_F24) {
-        keyCode = (event->keysym.scancode - SDL_SCANCODE_F13) + VK_F13;
-    }
-    else if (event->keysym.scancode >= SDL_SCANCODE_KP_1 && event->keysym.scancode <= SDL_SCANCODE_KP_9) {
-        // SDL defines SDL_SCANCODE_KP_0 > SDL_SCANCODE_KP_9, so we need to handle that manually
-        keyCode = (event->keysym.scancode - SDL_SCANCODE_KP_1) + VK_NUMPAD0 + 1;
+    if(!isSystemKeyCaptureActive() && event->keysym.scancode == SDL_SCANCODE_LGUI) {
+        return;
     }
-    else {
-        switch (event->keysym.scancode) {
-            case SDL_SCANCODE_BACKSPACE:
-                keyCode = 0x08;
-                break;
-            case SDL_SCANCODE_TAB:
-                keyCode = 0x09;
-                break;
-            case SDL_SCANCODE_CLEAR:
-                keyCode = 0x0C;
-                break;
-            case SDL_SCANCODE_KP_ENTER: // FIXME: Is this correct?
-            case SDL_SCANCODE_RETURN:
-                keyCode = 0x0D;
-                break;
-            case SDL_SCANCODE_PAUSE:
-                keyCode = 0x13;
-                break;
-            case SDL_SCANCODE_CAPSLOCK:
-                keyCode = 0x14;
-                break;
-            case SDL_SCANCODE_ESCAPE:
-                keyCode = 0x1B;
-                break;
-            case SDL_SCANCODE_SPACE:
-                keyCode = 0x20;
-                break;
-            case SDL_SCANCODE_PAGEUP:
-                keyCode = 0x21;
-                break;
-            case SDL_SCANCODE_PAGEDOWN:
-                keyCode = 0x22;
-                break;
-            case SDL_SCANCODE_END:
-                keyCode = 0x23;
-                break;
-            case SDL_SCANCODE_HOME:
-                keyCode = 0x24;
-                break;
-            case SDL_SCANCODE_LEFT:
-                keyCode = 0x25;
-                break;
-            case SDL_SCANCODE_UP:
-                keyCode = 0x26;
-                break;
-            case SDL_SCANCODE_RIGHT:
-                keyCode = 0x27;
-                break;
-            case SDL_SCANCODE_DOWN:
-                keyCode = 0x28;
-                break;
-            case SDL_SCANCODE_SELECT:
-                keyCode = 0x29;
-                break;
-            case SDL_SCANCODE_EXECUTE:
-                keyCode = 0x2B;
-                break;
-            case SDL_SCANCODE_PRINTSCREEN:
-                keyCode = 0x2C;
-                break;
-            case SDL_SCANCODE_INSERT:
-                keyCode = 0x2D;
-                break;
-            case SDL_SCANCODE_DELETE:
-                keyCode = 0x2E;
-                break;
-            case SDL_SCANCODE_HELP:
-                keyCode = 0x2F;
-                break;
-            case SDL_SCANCODE_KP_0:
-                // See comment above about why we only handle SDL_SCANCODE_KP_0 here
-                keyCode = VK_NUMPAD0;
-                break;
-            case SDL_SCANCODE_0:
-                // See comment above about why we only handle SDL_SCANCODE_0 here
-                keyCode = VK_0;
-                break;
-            case SDL_SCANCODE_KP_MULTIPLY:
-                keyCode = 0x6A;
-                break;
-            case SDL_SCANCODE_KP_PLUS:
-                keyCode = 0x6B;
-                break;
-            case SDL_SCANCODE_KP_COMMA:
-                keyCode = 0x6C;
-                break;
-            case SDL_SCANCODE_KP_MINUS:
-                keyCode = 0x6D;
-                break;
-            case SDL_SCANCODE_KP_PERIOD:
-                keyCode = 0x6E;
-                break;
-            case SDL_SCANCODE_KP_DIVIDE:
-                keyCode = 0x6F;
-                break;
-            case SDL_SCANCODE_NUMLOCKCLEAR:
-                keyCode = 0x90;
-                break;
-            case SDL_SCANCODE_SCROLLLOCK:
-                keyCode = 0x91;
-                break;
-            case SDL_SCANCODE_LSHIFT:
-                keyCode = 0xA0;
-                break;
-            case SDL_SCANCODE_RSHIFT:
-                keyCode = 0xA1;
-                break;
-            case SDL_SCANCODE_LCTRL:
-                keyCode = 0xA2;
-                break;
-            case SDL_SCANCODE_RCTRL:
-                keyCode = 0xA3;
-                break;
-            case SDL_SCANCODE_LALT:
-                keyCode = 0xA4;
-                break;
-            case SDL_SCANCODE_RALT:
-                keyCode = 0xA5;
-                break;
-            case SDL_SCANCODE_LGUI:
-                if (!isSystemKeyCaptureActive()) {
-                    return;
-                }
-                keyCode = 0x5B;
-                break;
-            case SDL_SCANCODE_RGUI:
-                if (!isSystemKeyCaptureActive()) {
-                    return;
-                }
-                keyCode = 0x5C;
-                break;
-            case SDL_SCANCODE_APPLICATION:
-                keyCode = 0x5D;
-                break;
-            case SDL_SCANCODE_AC_BACK:
-                keyCode = 0xA6;
-                break;
-            case SDL_SCANCODE_AC_FORWARD:
-                keyCode = 0xA7;
-                break;
-            case SDL_SCANCODE_AC_REFRESH:
-                keyCode = 0xA8;
-                break;
-            case SDL_SCANCODE_AC_STOP:
-                keyCode = 0xA9;
-                break;
-            case SDL_SCANCODE_AC_SEARCH:
-                keyCode = 0xAA;
-                break;
-            case SDL_SCANCODE_AC_BOOKMARKS:
-                keyCode = 0xAB;
-                break;
-            case SDL_SCANCODE_AC_HOME:
-                keyCode = 0xAC;
-                break;
-            case SDL_SCANCODE_SEMICOLON:
-                keyCode = 0xBA;
-                break;
-            case SDL_SCANCODE_EQUALS:
-                keyCode = 0xBB;
-                break;
-            case SDL_SCANCODE_COMMA:
-                keyCode = 0xBC;
-                break;
-            case SDL_SCANCODE_MINUS:
-                keyCode = 0xBD;
-                break;
-            case SDL_SCANCODE_PERIOD:
-                keyCode = 0xBE;
-                break;
-            case SDL_SCANCODE_SLASH:
-                keyCode = 0xBF;
-                break;
-            case SDL_SCANCODE_GRAVE:
-                keyCode = 0xC0;
-                break;
-            case SDL_SCANCODE_LEFTBRACKET:
-                keyCode = 0xDB;
-                break;
-            case SDL_SCANCODE_BACKSLASH:
-                keyCode = 0xDC;
-                break;
-            case SDL_SCANCODE_RIGHTBRACKET:
-                keyCode = 0xDD;
-                break;
-            case SDL_SCANCODE_APOSTROPHE:
-                keyCode = 0xDE;
-                break;
-            case SDL_SCANCODE_NONUSBACKSLASH:
-                keyCode = 0xE2;
-                break;
-            default:
-                SDL_LogInfo(SDL_LOG_CATEGORY_APPLICATION,
-                            "Unhandled button event: %d",
-                             event->keysym.scancode);
-                return;
-        }
+    try {
+        keyCode = sdl_vk_map.at(event->keysym.scancode);
+    } catch (const std::out_of_range& e) {
+        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Unknown key code for scan code %d", event->keysym.scancode);
+        return;
     }
 
     // Track the key state so we always know which keys are down
