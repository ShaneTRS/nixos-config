#!/usr/bin/env bash

SRC="${SRC:-$HOME/.config/nixos}"
SUDO="${SUDO:-$(which doas &>/dev/null && echo doas || echo sudo)}"

check() {(
  git remote update &>/dev/null
  git status -uno | grep -q 'Your branch is behind'
)}

# shellcheck disable=SC2120
garbage() {(
  CMD="nix-collect-garbage ${*:---delete-older-than ${TIME:-30d}}"
  echo "executing: $CMD" 1>&2
  # shellcheck disable=SC2086
  $SUDO $CMD || exit 1; $CMD
)}

merge() {(
  git remote update &>/dev/null
  git add -A; git update-index --refresh >/dev/null
  git commit -am "AUTO: Configuration updated"
  git pull --rebase
)}

push() {(
  git push
)}

help() {
  cat <<-EOF
	Usage: $0 <command>"
	Commands:
	  check      Return true if local branch is behind remote
	  garbage    Run garbage collection on the Nix store
	  merge      Get new changes from remote
	  push       Submit local changes to the remote
	  rebuild    Rebuild system with current configuration
	  update     Get new changes and rebuild the system
	EOF
}

rebuild() {(
  ./rebuild "${@:-boot}"
)}

# shellcheck disable=SC2120
update() {(
  check || exit 0
  merge && push
  ${GARBAGE:-true} && garbage
  rebuild "$@"
)}

notify() {(
  check || exit 0
  (( NOTIFY_COUNT += 1 ))
  eval "$(notify-send -i "$NOTIFY_ICON" -a "Tundra: System Updater" -u critical \
  'System update available!' 'Select an option below to continue' \
  -A "update"="Install update in background" -A "sleep $((${NOTIFY_DELAY:-1200} * NOTIFY_COUNT)); notify"="Ask me later" -A "exit"="Ignore")"
)}

export COMMIT INTERACTIVE MACHINE NOTIFY_DELAY NOTIFY_ICON SRC UPDATE TIME
cd "$SRC" || exit 1

[ -z "$*" ] && help
if grep -q nix <<< "$@"; then
  "${@//\#/git+file://$SRC?submodules=1#}"
else
  "$@"
fi